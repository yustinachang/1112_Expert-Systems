(defmodule MAIN (export deftemplate ?ALL))
(deftemplate MAIN::cell (slot row) (slot column) (slot status))
(deftemplate MAIN::dimensions (slot rows) (slot columns))
(defrule MAIN::life-init
	(last-generation ?l)
	?f <- (current-generation ?c&:(<= ?c ?l))
=>
	(retract ?f)
	(assert (current-generation (+ ?c 1)))
	(focus PRINT COMPUTE-NEIGHBORS NEXT-GENERATION)
)



(defmodule PRINT (import MAIN deftemplate ?ALL))
(defrule PRINT::start-print
	(current-generation ?g)
=>
	(assert (print-row 1))
	(assert (print-column 1))
	(printout t crlf "Generation " ?g crlf)
)
(defrule PRINT::cell-print
	(dimensions (rows ?nr) (columns ?nc))
	?f <- (print-column ?c&:(<= ?c ?nc))
	(print-row ?r&:(<= ?r ?nr))
	(cell (row ?r) (column ?c) (status ?s))
=>
	(printout t ?s)
	(retract ?f)
	(assert (print-column (+ 1 ?c)))
)
(defrule PRINT::my-print-crlf
	(dimensions (rows ?nr) (columns ?nc))
	?f1 <- (print-row ?r&:(<= ?r ?nr))
	?f2 <- (print-column ?c&:(> ?c ?nc))
=>
	(printout t crlf)
	(retract ?f1 ?f2)
	(assert (print-row (+ 1 ?r)))
	(assert (print-column 1))
)



(defmodule COMPUTE-NEIGHBORS (import MAIN deftemplate cell) (export deftemplate neighbor-sum))
(deftemplate COMPUTE-NEIGHBORS::neighbor (slot row) (slot column) (multislot live-cell))
(deftemplate COMPUTE-NEIGHBORS::neighbor-sum (slot row) (slot column) (slot value))
(defrule COMPUTE-NEIGHBORS::make-neighbors
	(cell (row ?x) (column ?y) (status *))
=>
	(assert (neighbor (row (- ?x 1)) (column (- ?y 1)) (live-cell ?x ?y)))
	(assert (neighbor (row (- ?x 1)) (column ?y) (live-cell ?x ?y)))
	(assert (neighbor (row (- ?x 1)) (column (+ 1 ?y)) (live-cell ?x ?y)))
	(assert (neighbor (row ?x) (column (- ?y 1)) (live-cell ?x ?y)))
	(assert (neighbor (row ?x) (column (+ 1 ?y)) (live-cell ?x ?y)))
	(assert (neighbor (row (+ 1 ?x)) (column (- ?y 1)) (live-cell ?x ?y)))
	(assert (neighbor (row (+ 1 ?x)) (column ?y) (live-cell ?x ?y)))
	(assert (neighbor (row (+ 1 ?x)) (column (+ 1 ?y)) (live-cell ?x ?y)))
)
(defrule COMPUTE-NEIGHBORS::cleanup-neighbors
	?f1 <- (neighbor (row ?x) (column ?y) (live-cell $?))
	(not (cell (row ?x) (column ?y) (status ?)))
=>
	(retract ?f1)
)
(defrule COMPUTE-NEIGHBORS::create-neighbor-sum
	(cell (row ?x) (column ?y) (status ?))
=>
	(assert (neighbor-sum (row ?x) (column ?y) (value 0)))
)
(defrule COMPUTE-NEIGHBORS::my-neighbor-sum
	?f1 <- (neighbor (row ?x) (column ?y) (live-cell $?))
	?f2 <- (neighbor-sum (row ?x) (column ?y) (value ?v))
=>
	(retract ?f1 ?f2)
	(assert (neighbor-sum (row ?x) (column ?y) (value (+ 1 ?v))))
)



(defmodule NEXT-GENERATION (import MAIN deftemplate cell) (import COMPUTE-NEIGHBORS deftemplate neighbor-sum))
(defrule NEXT-GENERATION::continue-life
	?a <- (cell (row ?x) (column ?y) (status *))
	?b <- (neighbor-sum (row ?x) (column ?y) (value 2|3))
=>
	(retract ?a ?b)
	(assert (cell (row ?x) (column ?y) (status *)))
)
(defrule NEXT-GENERATION::my-life-to-death
	?a <- (cell (row ?x) (column ?y) (status *))
	?b <- (neighbor-sum (row ?x) (column ?y) (value ~2&~3))
=>
	(retract ?a ?b)
	(assert (cell (row ?x) (column ?y) (status -)))
)
(defrule NEXT-GENERATION::my-death-to-life
	?a <- (cell (row ?x) (column ?y) (status -))
	?b <- (neighbor-sum (row ?x) (column ?y) (value 3))
=>
	(retract ?a ?b)
	(assert (cell (row ?x) (column ?y) (status *)))
)
(defrule NEXT-GENERATION::my-continue-death
	?a <- (cell (row ?x) (column ?y) (status -))
	?b <- (neighbor-sum (row ?x) (column ?y) (value ~3))
=>
	(retract ?a ?b)
	(assert (cell (row ?x) (column ?y) (status -)))
)



(deffacts MAIN::initial
 
  (cell (row 1) (column 1) (status -))
  (cell (row 1) (column 2) (status *))
  (cell (row 1) (column 3) (status -))
  (cell (row 1) (column 4) (status -))
  (cell (row 1) (column 5) (status *))

  (cell (row 2) (column 1) (status -))
  (cell (row 2) (column 2) (status *))
  (cell (row 2) (column 3) (status *))
  (cell (row 2) (column 4) (status *))
  (cell (row 2) (column 5) (status *))

  (cell (row 3) (column 1) (status -))
  (cell (row 3) (column 2) (status *))
  (cell (row 3) (column 3) (status -))
  (cell (row 3) (column 4) (status -))
  (cell (row 3) (column 5) (status *))

  (cell (row 4) (column 1) (status -))
  (cell (row 4) (column 2) (status -))
  (cell (row 4) (column 3) (status -))
  (cell (row 4) (column 4) (status *))
  (cell (row 4) (column 5) (status -))

  (cell (row 5) (column 1) (status -))
  (cell (row 5) (column 2) (status -))
  (cell (row 5) (column 3) (status -))
  (cell (row 5) (column 4) (status -))
  (cell (row 5) (column 5) (status -))

  (dimensions (rows 5) (columns 5))
  (current-generation 0)
  (last-generation 4)
)